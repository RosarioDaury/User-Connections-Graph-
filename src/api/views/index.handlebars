<!DOCTYPE html>
<meta charset="utf-8" />
<style>
  html{
    background-color: black;
  }
  .links line {
    stroke: white;
  }

  .nodes circle {
    stroke: #fff;
    stroke-width: 1.5px;
  }

  text {
    color: white;
    fill: white; /* Adjust color as needed */
    font-size: 10px;
  }
</style>

<svg width="1600" height="800"></svg>
<script src="https://d3js.org/d3.v4.min.js"></script>
<script>
  //initilize svg or grab svg
  var svg = d3.select("svg");
  var width = svg.attr("width");
  var height = svg.attr("height");

  fetch('http://localhost:3000/data')
        .then(response => response.json())
        .then(data => {
            console.log(data);
            var simulation = d3
              .forceSimulation(data.nodes)
              .force(
                  "link",
                  d3.forceLink()
                      .id(function(d) {
                          return d.id;
                      })
                      .links(data.links)
              )
              .force("charge", d3.forceManyBody().strength(-100))
              .force("center", d3.forceCenter(width / 2, height / 2))
              .on("tick", ticked);

          var link = svg
              .append("g")
              .attr("class", "links")
              .selectAll("line")
              .data(data.links)
              .enter()
              .append("line")
              .attr("stroke-width", function(d) {
                  return 2;
              });

          var nodesGroup = svg
              .append("g")
              .attr("class", "nodes")
              .selectAll(".node")
              .data(data.nodes)
              .enter()
              .append("g")
              .attr("class", "node");

          // Append circles for nodes
          var node = nodesGroup
              .append("circle")
              .attr("r", 7)
              .attr("fill", "grey")
              .call(
                d3
                  .drag()
                  .on("start", dragstarted)
                  .on("drag", dragged)
                  .on("end", dragended)
              );

          // Append text for node names
          nodesGroup
              .append("text")
              .attr("dx", 12) // Adjust the horizontal position of the text
              .attr("dy", ".35em")
              .text(function(d) { 
                return d.id.substring(d.id.length - 4) 
              });

          // Position nodes and text
          nodesGroup.attr("transform", function(d) {
              return "translate(" + d.x + "," + d.y + ")";
          });

          function ticked() {
              link
                  .attr("x1", function(d) { return d.source.x; })
                  .attr("y1", function(d) { return d.source.y; })
                  .attr("x2", function(d) { return d.target.x; })
                  .attr("y2", function(d) { return d.target.y; });
    
              nodesGroup.attr("transform", function(d) {
                  return "translate(" + d.x + "," + d.y + ")";
              });
          }

          function dragstarted(d) {
              if (!d3.event.active) simulation.alphaTarget(0.3).restart();
              d.fx = d.x;
              d.fy = d.y;
          }

          function dragged(d) {
              d.fx = d3.event.x;
              d.fy = d3.event.y;
          }

          function dragended(d) {
              if (!d3.event.active) simulation.alphaTarget(0);
              d.fx = null;
              d.fy = null;
          }
        })
        .catch(error => {
            console.error('Error fetching data:', error);
        });

</script>